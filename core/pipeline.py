# -*- coding: utf-8 -*-
"""core_pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PQrN_gGcpswyf7L-MYIO9c01tafCKHLT
"""

import time
from typing import Optional

def execute_full_pipeline(
    user_query: str,
    manager,
    evaluator,
    secretary,
    shared_db,
    max_retries: int = 5):
    try:
        result = manager.run(user_query)
        heatmap = result.get("heatmap", {})

        agent_rags = {name: agent.vectorstore
              for name, agent in manager.agents.items()}
        eval_result = evaluator.evaluate(
            essay=result["final_essay"],
            agent_outputs=result["raw_outputs"],
            original_query=user_query,
            session_id=manager.session_id,
            agent_rags=agent_rags
        )

        retries = 0
        while eval_result["reroute_triggered"] and retries < max_retries:
            print(f"Retrying due to {eval_result['reason']} â€” starting from {eval_result['reroute_start']}")
            manager.adjust_top_p_for_agent(manager.agents[eval_result["reroute_start"]])

            result = manager.run_from_agent(
                query=user_query,
                start_agent_name=eval_result["reroute_start"],
                override_text=eval_result["override_text"],
                problem_chunk=eval_result["problem_chunk"],
                original_query=user_query,
                agent_outputs=result["raw_outputs"],
                reason=eval_result["reason"],
                session_id=manager.session_id
            )

            heatmap = result.get("heatmap", {})
            agent_rags = {name: agent.vectorstore          # hand the raw store
              for name, agent in manager.agents.items()}

            eval_result = evaluator.evaluate(
                essay=result["final_essay"],
                agent_outputs=result["raw_outputs"],
                original_query=user_query,
                session_id=manager.session_id,
                agent_rags=agent_rags
            )

            retries += 1

        if eval_result["reroute_triggered"]:
            print("Final output still flagged after max retries. Likely insufficient data.")
        else:
            secretary.add_session(
                session_id=manager.session_id,
                query=user_query,
                final_essay=result["final_essay"],
                per_agent_context=manager.agent_contexts
            )
            secretary.push_to_huggingface()
            secretary.push_tinydb_logs_to_huggingface()
            print("Answer validated successfully!")

        shared_db.insert({
            "type": "pipeline_result",
            "session_id": manager.session_id,
            "query": user_query,
            "final_passed": not eval_result["reroute_triggered"],
            "final_eval_result": eval_result,
            "final_essay": result["final_essay"],
            "heatmap": heatmap,
            "retry_count": retries,
            "timestamp": time.time()
        })

        return {
            "essay": result["final_essay"],
            "passed": not eval_result["reroute_triggered"],
            "evaluations": eval_result,
            "session_id": manager.session_id,
            "heatmap": heatmap,
            "retries": retries
        }

    except (FileNotFoundError, KeyError, ValueError, RuntimeError) as specific_error:
        print(f"Pipeline failed due to: {type(specific_error).__name__}: {specific_error}")

        shared_db.insert({
            "type": "pipeline_exception",
            "session_id": manager.session_id,
            "query": user_query,
            "error_type": type(specific_error).__name__,
            "error_message": str(specific_error),
            "timestamp": time.time()
        })

        return {
            "error": str(specific_error),
            "passed": False,
            "session_id": manager.session_id,
            "error_type": type(specific_error).__name__
        }

    except Exception as e:
        print(f"Unexpected crash in pipeline: {e}")

        # Logging evaluation results if available
        error_log = {
            "type": "pipeline_exception",
            "session_id": manager.session_id,
            "query": user_query,
            "error_type": "UnknownError",
            "error_message": str(e),
            "timestamp": time.time()
        }

        if 'result' in locals() and 'eval_result' in locals():
            error_log.update({
                "final_passed": not eval_result.get("reroute_triggered", True),
                "final_eval_result": eval_result,
                "final_essay": result.get("final_essay", "[UNAVAILABLE]"),
                "heatmap": result.get("heatmap", {})
            })

        shared_db.insert(error_log)

        return {
            "error": str(e),
            "passed": False,
            "session_id": manager.session_id,
            "error_type": "UnknownError"
        }